import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile

API_TOKEN = os.getenv("API_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üì± –£–∑–Ω–∞—Ç—å –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", callback_data="about_app")],
    [InlineKeyboardButton(text="üíº –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ñ—Ä–∞–Ω—à–∏–∑–µ", callback_data="about_franchise")],
    [InlineKeyboardButton(text="üé• –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ", callback_data="watch_video")],
    [InlineKeyboardButton(text="üìÑ –°–∫–∞—á–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é", callback_data="download_presentation")],
    [InlineKeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="send_request")]
])

# –ö–æ–º–∞–Ω–¥—ã Telegram –º–µ–Ω—é (—Å–ª–µ–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞)
@dp.startup()
async def setup_bot_commands(bot: Bot):
    commands = [
        types.BotCommand(command="menu", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        types.BotCommand(command="app", description="–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"),
        types.BotCommand(command="franchise", description="–û —Ñ—Ä–∞–Ω—à–∏–∑–µ"),
        types.BotCommand(command="presentation", description="–°–∫–∞—á–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é"),
        types.BotCommand(command="video", description="–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ"),
        types.BotCommand(command="apply", description="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
    ]
    await bot.set_my_commands(commands)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(Command("menu"))
async def menu_command(message: types.Message):
    await message.answer("‚¨á –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)

# –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
@router.message(Command("app"))
@router.callback_query(F.data == "about_app")
async def about_app(event):
    msg = event.message if isinstance(event, types.CallbackQuery) else event
    await msg.answer(
        "üì± –í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Good Day:\n"
        "‚Ä¢ –°–∫–∏–¥–∫–∏ –∏ –∞–∫—Ü–∏–∏ –≤ –≥–æ—Ä–æ–¥–µ\n"
        "‚Ä¢ –†–µ–∫–ª–∞–º–∞ –¥–ª—è –±–∏–∑–Ω–µ—Å–æ–≤\n"
        "‚Ä¢ –£–¥–æ–±–Ω—ã–π –ø–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã\n\n"
        "üî• –ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π.",
        reply_markup=main_menu
    )
    if isinstance(event, types.CallbackQuery): await event.answer()

# –û —Ñ—Ä–∞–Ω—à–∏–∑–µ
@router.message(Command("franchise"))
@router.callback_query(F.data == "about_franchise")
async def about_franchise(event):
    msg = event.message if isinstance(event, types.CallbackQuery) else event
    await msg.answer(
        "üíº –§—Ä–∞–Ω—à–∏–∑–∞ Good Day ‚Äî —ç—Ç–æ:\n"
        "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏\n"
        "‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ—Å—Ç—å –≤ —Ä–µ–≥–∏–æ–Ω–µ\n"
        "‚Ä¢ –ì–æ—Ç–æ–≤—ã–π IT-–ø—Ä–æ–¥—É–∫—Ç\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞, –æ–±—É—á–µ–Ω–∏–µ –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥\n\n"
        "–¢—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –±–∏–∑–Ω–µ—Å–∞ –∫ —Ä–µ–∫–ª–∞–º–Ω—ã–º –ø–∞–∫–µ—Ç–∞–º.\n"
        "–ú—ã –ø–æ–º–æ–≥–∞–µ–º —Ç–µ–±–µ –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ –∑–∞–ø—É—Å–∫–∞.",
        reply_markup=main_menu
    )
    if isinstance(event, types.CallbackQuery): await event.answer()

# –°–∫–∞—á–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é
@router.message(Command("presentation"))
@router.callback_query(F.data == "download_presentation")
async def send_presentation(event):
    msg = event.message if isinstance(event, types.CallbackQuery) else event
    document = FSInputFile("presentation.pdf")
    await msg.answer_document(document, caption="üìÑ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —Ñ—Ä–∞–Ω—à–∏–∑—ã Good Day", reply_markup=main_menu)
    if isinstance(event, types.CallbackQuery): await event.answer()

# –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ
@router.message(Command("video"))
@router.callback_query(F.data == "watch_video")
async def send_video(event):
    msg = event.message if isinstance(event, types.CallbackQuery) else event
    video = FSInputFile("intro_video.mp4")
    await msg.answer_video(video=video, caption="üé• –í–∏–¥–µ–æ-–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –æ—Ç –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è", reply_markup=main_menu)
    if isinstance(event, types.CallbackQuery): await event.answer()

# –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
@router.message(Command("apply"))
@router.callback_query(F.data == "send_request")
async def send_request(event):
    user = event.from_user
    msg = event.message if isinstance(event, types.CallbackQuery) else event
    text = (
        f"üì¨ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\n"
        f"–ò–º—è: {user.full_name}\n"
        f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{user.username if user.username else '–Ω–µ—Ç'}\n"
        f"ID: {user.id}"
    )
    if ADMIN_ID:
        await bot.send_message(chat_id=int(ADMIN_ID), text=text)
    await msg.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=main_menu)
    if isinstance(event, types.CallbackQuery): await event.answer()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
